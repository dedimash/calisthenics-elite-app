import React, { useState, useCallback } from 'react';\nimport { ShoppingCart, Plus, Minus, Clock, Users, ChefHat, Star } from 'lucide-react';\nimport SearchBar from './SearchBar';\nimport RecipeSearchBar from './RecipeSearchBar';\nimport { israeliGroceryItems, groceryCategories, israeliStores } from '../../data/israeliGroceryComplete';\nimport { fitnessRecipes, recipeCategories, searchRecipes, getRecipesByCategory, getRecipesByDifficulty, getRecipesByTag, getRecipesByPrepTime, getRecipesByNutritionGoal } from '../../data/fitnessRecipes';\n\nconst GroceryRecipeApp = () => {\n  const [activeTab, setActiveTab] = useState('grocery');\n  const [cart, setCart] = useState([]);\n  const [filteredItems, setFilteredItems] = useState(israeliGroceryItems);\n  const [filteredRecipes, setFilteredRecipes] = useState(fitnessRecipes);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [recipeSearchTerm, setRecipeSearchTerm] = useState('');\n\n  // Grocery filtering logic\n  const handleGrocerySearch = useCallback((term) => {\n    setSearchTerm(term);\n    if (!term.trim()) {\n      setFilteredItems(israeliGroceryItems);\n      return;\n    }\n    \n    const filtered = israeliGroceryItems.filter(item =>\n      item.name.toLowerCase().includes(term.toLowerCase()) ||\n      item.brand.toLowerCase().includes(term.toLowerCase()) ||\n      item.description.toLowerCase().includes(term.toLowerCase()) ||\n      item.category.toLowerCase().includes(term.toLowerCase())\n    );\n    setFilteredItems(filtered);\n  }, []);\n\n  const handleGroceryFilterChange = useCallback((filters) => {\n    let filtered = israeliGroceryItems;\n\n    // Apply search term first\n    if (searchTerm.trim()) {\n      filtered = filtered.filter(item =>\n        item.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        item.brand.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        item.description.toLowerCase().includes(searchTerm.toLowerCase())\n      );\n    }\n\n    // Apply category filter\n    if (filters.category) {\n      filtered = filtered.filter(item => item.category === filters.category);\n    }\n\n    // Apply store filter\n    if (filters.store) {\n      filtered = filtered.filter(item => item.store === filters.store);\n    }\n\n    // Apply healthy choice filter\n    if (filters.healthyOnly) {\n      filtered = filtered.filter(item => item.healthyChoice);\n    }\n\n    // Apply kosher filter\n    if (filters.kosherOnly) {\n      filtered = filtered.filter(item => item.kosher);\n    }\n\n    // Apply price range filter\n    if (filters.priceRange.min > 0 || filters.priceRange.max < 1000) {\n      filtered = filtered.filter(item => \n        item.price >= filters.priceRange.min && item.price <= filters.priceRange.max\n      );\n    }\n\n    setFilteredItems(filtered);\n  }, [searchTerm]);\n\n  // Recipe filtering logic\n  const handleRecipeSearch = useCallback((term) => {\n    setRecipeSearchTerm(term);\n    if (!term.trim()) {\n      setFilteredRecipes(fitnessRecipes);\n      return;\n    }\n    \n    const filtered = searchRecipes(term);\n    setFilteredRecipes(filtered);\n  }, []);\n\n  const handleRecipeFilterChange = useCallback((filters) => {\n    let filtered = fitnessRecipes;\n\n    // Apply search term first\n    if (recipeSearchTerm.trim()) {\n      filtered = searchRecipes(recipeSearchTerm);\n    }\n\n    // Apply category filter\n    if (filters.category) {\n      filtered = getRecipesByCategory(filters.category).filter(recipe =>\n        !recipeSearchTerm.trim() || \n        filtered.some(f => f.id === recipe.id)\n      );\n    }\n\n    // Apply difficulty filter\n    if (filters.difficulty) {\n      filtered = filtered.filter(recipe => recipe.difficulty === filters.difficulty);\n    }\n\n    // Apply prep time filter\n    if (filters.maxPrepTime < 60) {\n      filtered = filtered.filter(recipe => {\n        const prepMinutes = parseInt(recipe.prepTime.split(' ')[0]);\n        return prepMinutes <= filters.maxPrepTime;\n      });\n    }\n\n    // Apply nutrition goal filter\n    if (filters.nutritionGoal) {\n      const nutritionFiltered = getRecipesByNutritionGoal(filters.nutritionGoal);\n      filtered = filtered.filter(recipe =>\n        nutritionFiltered.some(nf => nf.id === recipe.id)\n      );\n    }\n\n    // Apply tag filters\n    if (filters.tags.length > 0) {\n      filtered = filtered.filter(recipe =>\n        filters.tags.some(tag => recipe.tags.includes(tag))\n      );\n    }\n\n    setFilteredRecipes(filtered);\n  }, [recipeSearchTerm]);\n\n  // Cart functions\n  const addToCart = (item) => {\n    setCart(prevCart => {\n      const existingItem = prevCart.find(cartItem => cartItem.id === item.id);\n      if (existingItem) {\n        return prevCart.map(cartItem =>\n          cartItem.id === item.id\n            ? { ...cartItem, quantity: cartItem.quantity + 1 }\n            : cartItem\n        );\n      }\n      return [...prevCart, { ...item, quantity: 1 }];\n    });\n  };\n\n  const removeFromCart = (itemId) => {\n    setCart(prevCart => prevCart.filter(item => item.id !== itemId));\n  };\n\n  const updateQuantity = (itemId, newQuantity) => {\n    if (newQuantity <= 0) {\n      removeFromCart(itemId);\n      return;\n    }\n    setCart(prevCart =>\n      prevCart.map(item =>\n        item.id === itemId ? { ...item, quantity: newQuantity } : item\n      )\n    );\n  };\n\n  const totalPrice = cart.reduce((sum, item) => sum + (item.price * item.quantity), 0);\n  const totalItems = cart.reduce((sum, item) => sum + item.quantity, 0);\n\n  const getDifficultyColor = (difficulty) => {\n    switch(difficulty) {\n      case 'Easy': return 'text-green-600 bg-green-100';\n      case 'Medium': return 'text-yellow-600 bg-yellow-100';\n      case 'Hard': return 'text-red-600 bg-red-100';\n      default: return 'text-gray-600 bg-gray-100';\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <div className=\"bg-white shadow-sm border-b\">\n        <div className=\"max-w-7xl mx-auto px-4 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <h1 className=\"text-2xl font-bold text-gray-900\">\n              Calisthenics Elite - Nutrition Hub\n            </h1>\n            <div className=\"flex items-center gap-4\">\n              <button className=\"relative p-2 text-gray-600 hover:text-gray-900\">\n                <ShoppingCart className=\"w-6 h-6\" />\n                {totalItems > 0 && (\n                  <span className=\"absolute -top-2 -right-2 bg-red-500 text-white text-xs rounded-full w-5 h-5 flex items-center justify-center\">\n                    {totalItems}\n                  </span>\n                )}\n              </button>\n              <span className=\"text-lg font-semibold text-green-600\">\n                â‚ª{totalPrice.toFixed(2)}\n              </span>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"max-w-7xl mx-auto px-4 py-6\">\n        {/* Tabs */}\n        <div className=\"flex space-x-1 bg-gray-100 rounded-lg p-1 mb-6\">\n          <button\n            onClick={() => setActiveTab('grocery')}\n            className={`flex-1 py-2 px-4 rounded-md text-sm font-medium transition-colors ${\n              activeTab === 'grocery'\n                ? 'bg-white text-gray-900 shadow-sm'\n                : 'text-gray-600 hover:text-gray-900'\n            }`}\n          >\n            Grocery Items ({israeliGroceryItems.length})\n          </button>\n          <button\n            onClick={() => setActiveTab('recipes')}\n            className={`flex-1 py-2 px-4 rounded-md text-sm font-medium transition-colors ${\n              activeTab === 'recipes'\n                ? 'bg-white text-gray-900 shadow-sm'\n                : 'text-gray-600 hover:text-gray-900'\n            }`}\n          >\n            Fitness Recipes ({fitnessRecipes.length})\n          </button>\n        </div>\n\n        {/* Content */}\n        {activeTab === 'grocery' ? (\n          <div>\n            {/* Grocery Search */}\n            <SearchBar\n              onSearch={handleGrocerySearch}\n              onFilterChange={handleGroceryFilterChange}\n              categories={groceryCategories}\n              stores={israeliStores.map(store => store.name)}\n              placeholder=\"Search for Israeli grocery items, brands, or ingredients...\"\n            />\n\n            {/* Grocery Results */}\n            <div className=\"mb-4 text-sm text-gray-600\">\n              Showing {filteredItems.length} of {israeliGroceryItems.length} items\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4\">\n              {filteredItems.map(item => (\n                <div key={item.id} className=\"bg-white rounded-lg shadow-sm border border-gray-200 p-4 hover:shadow-md transition-shadow\">\n                  <div className=\"flex items-start justify-between mb-2\">\n                    <h3 className=\"font-semibold text-gray-900 text-sm leading-tight\">\n                      {item.name}\n                    </h3>\n                    {item.healthyChoice && (\n                      <span className=\"bg-green-100 text-green-800 text-xs px-2 py-1 rounded-full\">\n                        Healthy\n                      </span>\n                    )}\n                  </div>\n                  \n                  <p className=\"text-gray-600 text-xs mb-2\">{item.brand}</p>\n                  <p className=\"text-gray-500 text-xs mb-3 line-clamp-2\">{item.description}</p>\n                  \n                  <div className=\"flex items-center justify-between text-xs text-gray-500 mb-3\">\n                    <span>{item.store}</span>\n                    <span>{item.unit}</span>\n                  </div>\n                  \n                  {/* Nutrition Info */}\n                  <div className=\"grid grid-cols-2 gap-1 text-xs text-gray-600 mb-3\">\n                    <span>Cal: {item.nutrition.calories}</span>\n                    <span>Protein: {item.nutrition.protein}g</span>\n                    <span>Carbs: {item.nutrition.carbs}g</span>\n                    <span>Fiber: {item.nutrition.fiber}g</span>\n                  </div>\n                  \n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-lg font-bold text-green-600\">â‚ª{item.price}</span>\n                    <button\n                      onClick={() => addToCart(item)}\n                      className=\"bg-green-600 hover:bg-green-700 text-white p-2 rounded-lg transition-colors\"\n                    >\n                      <Plus className=\"w-4 h-4\" />\n                    </button>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        ) : (\n          <div>\n            {/* Recipe Search */}\n            <RecipeSearchBar\n              onSearch={handleRecipeSearch}\n              onFilterChange={handleRecipeFilterChange}\n              categories={recipeCategories}\n              placeholder=\"Search recipes by name, ingredients, cuisine, or nutrition goals...\"\n            />\n\n            {/* Recipe Results */}\n            <div className=\"mb-4 text-sm text-gray-600\">\n              Showing {filteredRecipes.length} of {fitnessRecipes.length} recipes\n            </div>\n\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              {filteredRecipes.map(recipe => (\n                <div key={recipe.id} className=\"bg-white rounded-lg shadow-sm border border-gray-200 p-6 hover:shadow-md transition-shadow\">\n                  {/* Recipe Header */}\n                  <div className=\"flex items-start justify-between mb-3\">\n                    <div className=\"flex-1\">\n                      <h3 className=\"font-bold text-gray-900 text-lg mb-1\">{recipe.name}</h3>\n                      <p className=\"text-gray-600 text-sm\">{recipe.description}</p>\n                    </div>\n                    <span className={`px-2 py-1 rounded-full text-xs font-medium ${getDifficultyColor(recipe.difficulty)}`}>\n                      {recipe.difficulty}\n                    </span>\n                  </div>\n\n                  {/* Recipe Meta */}\n                  <div className=\"flex items-center gap-4 text-sm text-gray-500 mb-4\">\n                    <div className=\"flex items-center gap-1\">\n                      <Clock className=\"w-4 h-4\" />\n                      <span>{recipe.prepTime}</span>\n                    </div>\n                    <div className=\"flex items-center gap-1\">\n                      <Users className=\"w-4 h-4\" />\n                      <span>{recipe.servings} servings</span>\n                    </div>\n                    <div className=\"flex items-center gap-1\">\n                      <ChefHat className=\"w-4 h-4\" />\n                      <span>{recipe.category}</span>\n                    </div>\n                  </div>\n\n                  {/* Nutrition */}\n                  <div className=\"grid grid-cols-4 gap-3 text-center bg-gray-50 rounded-lg p-3 mb-4\">\n                    <div>\n                      <div className=\"text-lg font-bold text-gray-900\">{recipe.nutrition.calories}</div>\n                      <div className=\"text-xs text-gray-500\">Calories</div>\n                    </div>\n                    <div>\n                      <div className=\"text-lg font-bold text-green-600\">{recipe.nutrition.protein}g</div>\n                      <div className=\"text-xs text-gray-500\">Protein</div>\n                    </div>\n                    <div>\n                      <div className=\"text-lg font-bold text-blue-600\">{recipe.nutrition.carbs}g</div>\n                      <div className=\"text-xs text-gray-500\">Carbs</div>\n                    </div>\n                    <div>\n                      <div className=\"text-lg font-bold text-orange-600\">{recipe.nutrition.fiber}g</div>\n                      <div className=\"text-xs text-gray-500\">Fiber</div>\n                    </div>\n                  </div>\n\n                  {/* Tags */}\n                  <div className=\"flex flex-wrap gap-1 mb-4\">\n                    {recipe.tags.slice(0, 4).map(tag => (\n                      <span key={tag} className=\"bg-gray-100 text-gray-700 text-xs px-2 py-1 rounded-full\">\n                        {tag}\n                      </span>\n                    ))}\n                    {recipe.tags.length > 4 && (\n                      <span className=\"text-gray-500 text-xs px-2 py-1\">+{recipe.tags.length - 4} more</span>\n                    )}\n                  </div>\n\n                  {/* Ingredients Preview */}\n                  <div className=\"border-t pt-4\">\n                    <h4 className=\"font-medium text-gray-900 mb-2\">Key Ingredients:</h4>\n                    <div className=\"text-sm text-gray-600\">\n                      {recipe.ingredients.slice(0, 3).map((ingredient, index) => (\n                        <span key={index}>\n                          {ingredient.name.split(' ').slice(0, 2).join(' ')}\n                          {index < 2 && index < recipe.ingredients.length - 1 && ', '}\n                        </span>\n                      ))}\n                      {recipe.ingredients.length > 3 && (\n                        <span className=\"text-gray-400\"> +{recipe.ingredients.length - 3} more</span>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {/* Shopping Cart Sidebar (if items in cart) */}\n        {cart.length > 0 && (\n          <div className=\"fixed right-4 top-20 w-80 bg-white shadow-lg rounded-lg border border-gray-200 p-4 z-50 max-h-96 overflow-y-auto\">\n            <h3 className=\"font-bold text-gray-900 mb-3 flex items-center gap-2\">\n              <ShoppingCart className=\"w-5 h-5\" />\n              Shopping Cart ({totalItems} items)\n            </h3>\n            \n            <div className=\"space-y-2 mb-4\">\n              {cart.map(item => (\n                <div key={item.id} className=\"flex items-center justify-between bg-gray-50 p-2 rounded\">\n                  <div className=\"flex-1\">\n                    <div className=\"font-medium text-sm text-gray-900\">{item.name}</div>\n                    <div className=\"text-xs text-gray-500\">â‚ª{item.price} each</div>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <button\n                      onClick={() => updateQuantity(item.id, item.quantity - 1)}\n                      className=\"text-gray-400 hover:text-gray-600\"\n                    >\n                      <Minus className=\"w-4 h-4\" />\n                    </button>\n                    <span className=\"w-8 text-center text-sm\">{item.quantity}</span>\n                    <button\n                      onClick={() => updateQuantity(item.id, item.quantity + 1)}\n                      className=\"text-gray-400 hover:text-gray-600\"\n                    >\n                      <Plus className=\"w-4 h-4\" />\n                    </button>\n                    <button\n                      onClick={() => removeFromCart(item.id)}\n                      className=\"text-red-400 hover:text-red-600 ml-2\"\n                    >\n                      <X className=\"w-4 h-4\" />\n                    </button>\n                  </div>\n                </div>\n              ))}\n            </div>\n            \n            <div className=\"border-t pt-3\">\n              <div className=\"flex justify-between items-center font-bold text-lg\">\n                <span>Total:</span>\n                <span className=\"text-green-600\">â‚ª{totalPrice.toFixed(2)}</span>\n              </div>\n              <button className=\"w-full bg-green-600 hover:bg-green-700 text-white py-2 px-4 rounded-lg mt-3 transition-colors\">\n                Proceed to Checkout\n              </button>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default GroceryRecipeApp;